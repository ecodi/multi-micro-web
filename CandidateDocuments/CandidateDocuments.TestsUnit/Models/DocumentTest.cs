using System;
using AutoMapper;
using Xunit;
using CandidateDocuments.Application.Models;
using CandidateDocuments.API.ViewModels;

namespace CandidateDocuments.Tests.Unit.Models
{
    public class DocumentTest
    {
        public class IdProperty
        {
            [Fact]
            public void ShouldBeAutoGenerated()
            {
                var document = new Document();
                Assert.NotEqual(document.Id, default(Guid));
            }
        }

        public class CreationDateProperty
        {
            [Fact]
            public void ShouldBeAutoSetToCurrentDate()
            {
                var now = DateTime.Now;
                var document = new Document();
                Assert.True(document.CreationDate.CompareTo(now) >= 0);
            }
        }

        public class FileExtensionProperty
        {
            [Theory,
                InlineData("file1.pdf", "pdf"),
                InlineData("f.i.l.e.1.doc", "doc"),
                InlineData("file1", "")]
            public void ShouldBeCalculatedByFilename(string filename, string expectedExtension)
            {
                var document = new Document { Filename = filename};
                Assert.Equal(document.FileExtension, expectedExtension);
            }
        }

        public class MappedToViewModel
        {
            [Fact]
            public void ShouldExposeAllProperties()
            {
                AutoMapperConfiguration.Configure();
                var document = new Document
                {
                    Id = Guid.NewGuid(),
                    CandidateId = Guid.NewGuid(),
                    Filename = "MyCV.pdf",
                    DocumentType = DocumentType.BusinessPlan,
                    ReviewerId = Guid.NewGuid()
                };
                var documentVm = Mapper.Map<Document, DocumentViewModel>(document);
                Assert.Equal(document.Id, documentVm.Id);
                Assert.Equal(document.CandidateId, documentVm.CandidateId);
                Assert.Equal(document.Filename, documentVm.Filename);
                Assert.Equal(document.FileExtension, documentVm.FileExtension);
                Assert.Equal((int)document.DocumentType, documentVm.DocumentType);
                Assert.Equal(document.ReviewerId, documentVm.ReviewerId);
                Assert.Equal(document.CreationDate, documentVm.CreationDate);
            }
        }

        public class MappedFromViewModel
        {
            [Fact]
            public void ShouldIgnoreIdCreationDateAndFileExtension()
            {
                AutoMapperConfiguration.Configure();
                var documentVm = new DocumentViewModel
                {
                    Id = Guid.NewGuid(),
                    CandidateId = Guid.NewGuid(),
                    Filename = "MyCV.pdf",
                    FileExtension = "doc",
                    DocumentType = (int)DocumentType.BusinessPlan,
                    ReviewerId = Guid.NewGuid(),
                    CreationDate = DateTime.MinValue
                };
                var document = Mapper.Map<DocumentViewModel, Document>(documentVm);
                Assert.NotEqual(document.Id, documentVm.Id);
                Assert.Equal(document.CandidateId, documentVm.CandidateId);
                Assert.Equal(document.Filename, documentVm.Filename);
                Assert.NotEqual(document.FileExtension, documentVm.FileExtension);
                Assert.Equal((int)document.DocumentType, documentVm.DocumentType);
                Assert.Equal(document.ReviewerId, documentVm.ReviewerId);
                Assert.NotEqual(document.CreationDate, documentVm.CreationDate);
            }
        }
    }
}
